package com.example.shaoxiaofei.webanddatabase.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.shaoxiaofei.webanddatabase.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserSex = new Property(1, int.class, "userSex", false, "USER_SEX");
        public final static Property UserLastX = new Property(2, String.class, "userLastX", false, "USER_LAST_X");
        public final static Property UserNickname = new Property(3, String.class, "userNickname", false, "sex");
        public final static Property UserIcon = new Property(4, String.class, "userIcon", false, "USER_ICON");
        public final static Property UserMobile = new Property(5, String.class, "userMobile", false, "USER_MOBILE");
        public final static Property UserId = new Property(6, int.class, "userId", false, "USER_ID");
        public final static Property UserLastExperience = new Property(7, String.class, "userLastExperience", false, "USER_LAST_EXPERIENCE");
        public final static Property UserLevelName = new Property(8, String.class, "userLevelName", false, "USER_LEVEL_NAME");
        public final static Property UserBirthday = new Property(9, long.class, "userBirthday", false, "USER_BIRTHDAY");
        public final static Property UserProvince = new Property(10, String.class, "userProvince", false, "USER_PROVINCE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_SEX\" INTEGER NOT NULL ," + // 1: userSex
                "\"USER_LAST_X\" TEXT," + // 2: userLastX
                "\"sex\" TEXT," + // 3: userNickname
                "\"USER_ICON\" TEXT," + // 4: userIcon
                "\"USER_MOBILE\" TEXT," + // 5: userMobile
                "\"USER_ID\" INTEGER NOT NULL ," + // 6: userId
                "\"USER_LAST_EXPERIENCE\" TEXT," + // 7: userLastExperience
                "\"USER_LEVEL_NAME\" TEXT," + // 8: userLevelName
                "\"USER_BIRTHDAY\" INTEGER NOT NULL ," + // 9: userBirthday
                "\"USER_PROVINCE\" TEXT);"); // 10: userProvince
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserSex());
 
        String userLastX = entity.getUserLastX();
        if (userLastX != null) {
            stmt.bindString(3, userLastX);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        String userMobile = entity.getUserMobile();
        if (userMobile != null) {
            stmt.bindString(6, userMobile);
        }
        stmt.bindLong(7, entity.getUserId());
 
        String userLastExperience = entity.getUserLastExperience();
        if (userLastExperience != null) {
            stmt.bindString(8, userLastExperience);
        }
 
        String userLevelName = entity.getUserLevelName();
        if (userLevelName != null) {
            stmt.bindString(9, userLevelName);
        }
        stmt.bindLong(10, entity.getUserBirthday());
 
        String userProvince = entity.getUserProvince();
        if (userProvince != null) {
            stmt.bindString(11, userProvince);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserSex());
 
        String userLastX = entity.getUserLastX();
        if (userLastX != null) {
            stmt.bindString(3, userLastX);
        }
 
        String userNickname = entity.getUserNickname();
        if (userNickname != null) {
            stmt.bindString(4, userNickname);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        String userMobile = entity.getUserMobile();
        if (userMobile != null) {
            stmt.bindString(6, userMobile);
        }
        stmt.bindLong(7, entity.getUserId());
 
        String userLastExperience = entity.getUserLastExperience();
        if (userLastExperience != null) {
            stmt.bindString(8, userLastExperience);
        }
 
        String userLevelName = entity.getUserLevelName();
        if (userLevelName != null) {
            stmt.bindString(9, userLevelName);
        }
        stmt.bindLong(10, entity.getUserBirthday());
 
        String userProvince = entity.getUserProvince();
        if (userProvince != null) {
            stmt.bindString(11, userProvince);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userSex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userLastX
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userIcon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userMobile
            cursor.getInt(offset + 6), // userId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userLastExperience
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userLevelName
            cursor.getLong(offset + 9), // userBirthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userProvince
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserSex(cursor.getInt(offset + 1));
        entity.setUserLastX(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.getInt(offset + 6));
        entity.setUserLastExperience(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserLevelName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserBirthday(cursor.getLong(offset + 9));
        entity.setUserProvince(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
